/**
 * Created by chalresbao on 16/11/24.
 */
import React, { Component } from 'react';
import pureRender from "pure-render-decorator"

import { Flex, Box } from '../Components/FlexBox'
import Paper from 'material-ui/Paper'
import ACTION_TYPE from '../Constants/ActionType'
import CONSTANTS from '../Constants'
import QueryAction from '../Actions/QueryActions'

import StateStore from '../Store/StateStore'
import UserStore from '../Store/UserStore'
import MissionStore from '../Store/MissionStore'

import Carousel from '../Components/Carousel'
import PopupTab from '../Components/PopupTab'
import BottomNav from '../Components/BottomNav'
import MissionList from '../Components/MissionList'
import AvatarNickNameGroup from '../Components/AvatarNickNameGroup'
import AllMissionButtonGroup from '../Components/AllMissionButtonGroup'
import Divider from 'material-ui/Divider';
import IconFlatButtonGroup from '../Components/IconFlatButtonGroup'
import IconLargeFlatButtonGroup from '../Components/IconLargeFlatButtonGroup'

import ScrollView from '../Components/ScrollView'
class Home extends Component {

    static contextTypes = {
        router: React.PropTypes.object
    };

    constructor(props) {
        super(props);

        this.state = {
            currentIndex:StateStore.getHomeSectionIndex(),
            missionList: [],
        }
        this.user = UserStore.getUser()
        this.filterIndex = StateStore.getFilterArrayIndex()
    }

    componentDidMount(){
        this.missionListFilter();
        MissionStore.addChangeListener(ACTION_TYPE.MISSION_ACTIONS.QUERY_MISSION_ALL, ()=>{
            this.missionListFilter()
        })
    }

    componentWillUnmount(){
        MissionStore.removeWholeListeners()
    }

    render() {
        return (
            <Flex flexColumn={true} className="section-wrapper">
                {this.props.children}
                <BottomNav onTap={this.onTapBottomNavHandle.bind(this)} index={this.state.currentIndex} />
            </Flex>
        );
    }

    renderView(){
        switch (this.state.currentIndex){
            case 0:

                return (
                    <Box>
                        <Paper>
                            <Carousel onSearchBarTap={this.searchBarTapHandle.bind(this)} />
                            <PopupTab topFilter={this.filterIndex[0]} subFilter={this.filterIndex[1]} onPopupTap={this.onPopupTapHandle.bind(this)} />
                        </Paper>
                        <ScrollView offsetHeight={document.body.clientWidth/1.875 + 36 + 56}>
                            <MissionList list={this.state.missionList} onListTap={this.onListTapHandle.bind(this)}/>
                        </ScrollView>
                    </Box>
                );
            case 1:
                return (
                    <ScrollView offsetHeight={56}>
                        <AvatarNickNameGroup nickname={this.user['nickname']}/>
                        <Paper>
                            <AllMissionButtonGroup onTap={this.onTapHandle.bind(this)} />
                            <Divider />
                            <IconFlatButtonGroup onTap={this.onTapHandle.bind(this)}/>
                        </Paper>
                        <IconLargeFlatButtonGroup onTap={this.onLargeTapHandle.bind(this)}/>
                    </ScrollView>
                );
            default:
                return []
        }
    }

    missionListFilter(){
        let [topFilter,subFilter] = this.filterIndex;
        let missionList = [];
        let tmpMissionList = MissionStore.getMissionArray();
        if(tmpMissionList.length === 0){
            return QueryAction.queryMissionList()
        }else{
            tmpMissionList.forEach((item)=>{
                switch (topFilter){
                    case 0:
                        missionList.push(item);
                        break;
                    case 1:
                        switch (subFilter){
                            case 0:
                                if(item['price'] < 3)
                                    missionList.push(item);
                                break;
                            case 1:
                                if(item['price'] > 3 && item['price'] < 15)
                                    missionList.push(item);
                                break;
                            case 2:
                                if(item['price'] > 15)
                                    missionList.push(item);
                                break;
                        }
                        break;
                    case 2:
                        if(item['attribute'] === subFilter)
                            missionList.push(item);
                        break;

                }
            });

            this.setState({
                missionList:missionList
            })
        }
    }

    onTapBottomNavHandle(index){
        // console.log(this.context.router)
        StateStore.setHomeSectionIndex(index);
        this.setState({
            currentIndex:index
        })
    }

    onTapHandle(missionCondition){
        StateStore.setMissionSectionIndex(missionCondition);
        this.context.router.push(CONSTANTS.ROUTER_PATH.MISSION.CHILDREN.USER_MISSION);
    }

    onLargeTapHandle(routeName){
        this.context.router.push(routeName);
    }

    onPopupTapHandle(topFilter,subFilter){
        this.filterIndex = [topFilter,subFilter];
        StateStore.setFilterArrayIndex(topFilter,subFilter)
        this.missionListFilter()
    }

    onListTapHandle(tapItemId){
        this.context.router.push(CONSTANTS.ROUTER_PATH.MISSION.CHILDREN.MISSION_DETAIL+"/"+tapItemId)
    }

    searchBarTapHandle(){
        this.context.router.push(CONSTANTS.ROUTER_PATH.SEARCH)
    }
}

export default pureRender(Home)